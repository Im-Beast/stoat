1.69420; // float
2; // int
"Hello world"; // string
[1,2,3];
(1,2,3);

let dog: int[2] = [1, 2];
dog;

let mut a: str = "hi";

let a: int = 5; // unmutable variable that's an int
let mut b: int = 10; // mutable variable that's an int

6 + 9;
4 * 1;
3 % 2;

b = 2 + 2 * 2; // b = 6
b -= 16; //  b = -10
b = 0; // b = 0
b += 2 + 2 * 2; // b = 6
b %= 5; // b = 1

if false {

}

let a: int = 2;
let b: int = 2;


if a > b {
    print("Hello");
} else {
    print("Bye");
}

if true || false {

} else if false !& true {

} else if true !| false {

}

let c: str = "mamma mia";
let a: bool = true;
// broken rn
// let c: str = if a { "big"; } else { "smol"; };

let arr: int[2] = [1, 2];
let slice: int[] = [|1, 2, 3, 4|];
let tuple: (int, str) = (1, "Hello");

let sized_slice: int[2] = [1, 2];

// TODO: property things
// sized_slice.push(3); // panic

let slice: int[] = [|1, 2|];

// TODO: property things
// slice.push(3); // ok

let mut i: int = 0;
while i < 10 {
    i += 1;
    print(i);
}

loop {
    123132;
    2;
    512123213;
    345233;
    244;
    "hi";

    i += 1;
    if i > 15 {
        break;
    }

    let daniello: str = "hi";
    print(daniello);
}

// TODO: for loops
// for i in slice {
//     print(i);
// }
// 
// for i in 0..10 {
//     print(i);
// }
// 
// for i in 0..=10 {
//     print(i);
// }

let tuple_slice: (int, int)[] = [|(1, 2), (3, 4)|];
// for (a, b) in tuple_slice {
//     print(a);
//     print(b);
// }

fun add(a: int, b: int) -> int {
    return a + b;
}

fun divide(a: int, b: int) ?> int {
    if b == 0 {
        bail "Cannot divide by zero";
    }
    return a / b;
}

fun hello() -> {}

hello();

fun lolz() ?> {
    divide(1, 0)?; // returns error
}

fun panic_lolz() -> {
    divide(1, 0)!; // panics
}

enum DogRace {
    Shiba_Inu,
    Husky,
}

enum AgedDog {
    Shiba_Inu(int),
    Husky(int),
}

enum Dog {
    Shiba_Inu = 420,
    Husky = 69,
    Other(str),
}

struct Doggo {
    name: str,
    age: int,
}